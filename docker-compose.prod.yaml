services:
  postgres:
    image: postgres:16
    container_name: l0_database
    restart: always
    env_file: ./backend/.env
    ports:
      - "${PGPORT}:${PGPORT}"
    healthcheck:
      test: ["CMD", "sh", "-c", "pg_isready -d $${PGDATABASE} -U $${PGUSER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - l0_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: l0_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - l0_network  

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: l0_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1   
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - l0_network

  backend:
    container_name: l0_backend
    restart: always
    depends_on:
      - postgres
      - kafka
      - zookeeper
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - l0_network

  frontend:
    container_name: l0_frontend
    restart: always
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}:80"  
    networks:
      - l0_network

  generator:
    container_name: l0_generator
    restart: no
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_started
    build:
      context: ./generator
      dockerfile: Dockerfile
    networks:
      - l0_network  

  prometheus:
    image: prom/prometheus
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - l0_network

  grafana:
    image: grafana/grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    networks:
      - l0_network      

networks:
  l0_network:
    driver: bridge
